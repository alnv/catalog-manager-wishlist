<?phpnamespace CMWishlist;use CatalogManager\CatalogController;use CatalogManager\CatalogFieldBuilder;use CatalogManager\Entity;use CatalogManager\I18nCatalogTranslator;use CatalogManager\Toolkit;class WishlistView extends CatalogController{    protected $blnPersist = false;    protected $arrWishlist = [];    protected $blnExplicit = false;    protected $arrExplicitTables = [];    protected $arrWishlistTables = [];    protected $objI18nCatalogTranslator = null;    public function __construct($arrOptions=[])    {        parent::__construct();        $this->blnPersist = (bool) $arrOptions['persist'];        $this->import('SQLQueryBuilder');        $objStorage = new \CMWishlist\Storage($this->blnPersist);        $arrTables = $objStorage->getTables();        $this->objI18nCatalogTranslator = new I18nCatalogTranslator();        $this->objI18nCatalogTranslator->initialize();        if (is_array($arrTables) && !empty($arrTables)) {            $this->arrWishlistTables = $arrTables;        }        $this->getWishlistData();    }    public function setExplicit($arrTables)    {        $arrExplicitTables = [];        $this->blnExplicit = true;        foreach ($arrTables as $strTable) {            if (in_array($strTable, $this->arrWishlistTables)) {                $arrExplicitTables[] = $strTable;            }        }        $this->arrExplicitTables = $arrExplicitTables;    }    public function render($arrSettings = [])    {        $arrData = [];        $arrTables = $this->arrWishlistTables;        $objTemplate = new \FrontendTemplate(($arrSettings['template'] ?: 'wishlist_view'));        if (!empty($this->arrExplicitTables)) $arrTables = $this->arrExplicitTables;        foreach ($arrTables as $strTable) {            $objFieldBuilder = new CatalogFieldBuilder();            $objFieldBuilder->initialize($strTable);            $arrCatalog = $objFieldBuilder->getCatalog();            $arrRow = $this->getRow($strTable, $arrCatalog, $arrSettings);            if (is_bool($arrRow) && $arrRow === false) continue;            $arrData[$strTable] = [];            $arrData[$strTable]['rows'] = $arrRow;            $arrData[$strTable]['table'] = $this->getTable($strTable, $arrCatalog);        }        $objTemplate->setData(['data' => $arrData, 'wishlist' => $this->arrWishlist]);        return $objTemplate->parse();    }    protected function getTable($strTable, $arrCatalog)    {        $arrModuleLabels = $this->objI18nCatalogTranslator->get('module', $arrCatalog['tablename']);        $strTitleLabel = $this->objI18nCatalogTranslator->get('field', 'title', ['titleOnly' => true]);        return [            'table' => $strTable,            'titleLabel' => $strTitleLabel,            'headline' => $arrModuleLabels[0],            'description' => $arrModuleLabels[1],            'amountLabel' => $GLOBALS['TL_LANG']['MSC']['CATALOG_MANAGER']['wishlistAmount']        ];    }    protected function getRow($strTable, $arrCatalog, $arrSettings = [])    {        $arrWishlist = $this->arrWishlist[$strTable];        $arrIds = $arrWishlist['ids'];        $arrCatalogs = [];        if (empty($arrIds)) {            $arrIds = ['0'];        }        foreach ($arrIds as $strId) {            $objEntity = new Entity($strId, $strTable, $arrSettings);            $arrEntity = $objEntity->getEntity();            if (empty($arrEntity)) {                continue;            }            $arrEntity['wishlistTable'] = $strTable;            $arrEntity['wishlistAmountValue'] = $arrWishlist['amounts'][$strId] ?: '1';            $arrCatalogs[] = $arrEntity;        }        return $arrCatalogs;    }    protected function getWishlistData()    {        if (empty($this->arrWishlistTables)) return null;        $objStorage = new \CMWishlist\Storage($this->blnPersist);        foreach ($this->arrWishlistTables as $strTable) {            $arrWishlist = $objStorage->getByTable($strTable);            if (Toolkit::isEmpty($arrWishlist)) continue;            if (is_array($arrWishlist) && !isset($arrWishlist['ids'])) continue;            $this->arrWishlist[$strTable] = $arrWishlist;        }    }}